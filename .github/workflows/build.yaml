name: Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - main

permissions:
  contents: write

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

  build:
    needs: check
    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: picpac-linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: picpac-linux-arm64
            use_cross: true

          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: picpac-darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: picpac-darwin-arm64

          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact_name: picpac-win-x64
          - os: windows-latest
            target: aarch64-pc-windows-gnu
            artifact_name: picpac-win-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.use_cross
        run: cargo install cross

      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi

      - name: Prepare package
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/picpac ./dist/${{ matrix.artifact_name }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          files: dist/${{ matrix.artifact_name }}
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}